package com.tangocard.api.client.config;

/*-
 * #%L
 * Tango Card RaaS API Client Starter
 * %%
 * Copyright (C) 2009 - 2020 Tango Card
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

import com.tangocard.api.client.log.ApiClientLogger;
import io.netty.handler.logging.LogLevel;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnResource;
import org.springframework.boot.info.BuildProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.DependsOn;
import org.springframework.core.io.Resource;
import org.springframework.core.io.support.PropertiesLoaderUtils;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.client.reactive.ReactorClientHttpConnector;
import org.springframework.web.reactive.function.client.ExchangeStrategies;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.netty.channel.BootstrapHandlers;
import reactor.netty.http.client.HttpClient;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

import static com.tangocard.api.client.ApiClient.*;

@Slf4j
@Configuration
public class WebClientConfig {

    public static final String BYTES = "BYTES";
    public static final String NONE = "NONE";
    public static final String BUILD_INFO_PROPERTIES_PATH = "META-INF/build-info.properties";
    public static final String BUILD_INFO_PROPERTIES_RESOURCE_PATH = "/" + BUILD_INFO_PROPERTIES_PATH;
    public static final String BUILD_INFO_PROPERTIES_SPRING_LOCATION = "${spring.info.build.location:classpath:" + BUILD_INFO_PROPERTIES_PATH + "}";

    @Value("${tangocard.raas.url}")
    private String tangocardRaasUrl;

    @Value("${tangocard.raas.platformKey}")
    private String platformKey;

    @Value("${tangocard.raas.platformName}")
    private String platformName;

    @Value("${tangocard.raas.codec.max-in-memory-size.bytes:524288}") // default to 500K if not supplied
    private Integer maxInMemorySizeBytes;

    @Value("${logging.level.reactor.netty.http.client:UNKNOWN}")
    private String nettyLoggingLevel;

    @ConditionalOnResource(resources = BUILD_INFO_PROPERTIES_SPRING_LOCATION)
    @ConditionalOnMissingBean
    @Bean
    public BuildProperties buildProperties() {
        try (InputStream is = this.getClass().getResourceAsStream(BUILD_INFO_PROPERTIES_RESOURCE_PATH)) {
            Properties properties = new Properties();
            properties.load(is);
            return new BuildProperties(properties);
        } catch (FileNotFoundException e) {
            // log but do not fail startup
            log.error("Resource " + BUILD_INFO_PROPERTIES_RESOURCE_PATH + " not found! This is expected to be generated " +
                    "by the Maven `spring-boot-maven-plugin` plugin.");
        } catch (IOException e) {
            log.error("Could not read resource " + BUILD_INFO_PROPERTIES_RESOURCE_PATH + "! This is expected to be " +
                    "generated by the Maven `spring-boot-maven-plugin` plugin.");
        }
        return new BuildProperties(new Properties()); // empty response if anything goes wrong
    }

    // A modified Netty `HttpClient` for request/response logging
    // See https://www.baeldung.com/spring-log-webclient-calls#2-logging-with-netty-httpclient
    @Bean
    @ConditionalOnMissingBean(name = "httpClient")
    public HttpClient httpClient() {
        HttpClient httpClient;
        if (LogLevel.TRACE.toString().equalsIgnoreCase(nettyLoggingLevel)) {
            httpClient = HttpClient.create().wiretap(true);
        } else if (LogLevel.DEBUG.toString().equalsIgnoreCase(nettyLoggingLevel)) {
            httpClient = HttpClient.create().tcpConfiguration(
                    tc -> tc.bootstrap(
                            b -> BootstrapHandlers.updateLogSupport(b, new ApiClientLogger(HttpClient.class))));
        } else {
            httpClient = HttpClient.create().wiretap(false);;
        }

        return httpClient;
    }

    @Bean
    @ConditionalOnMissingBean(name = "webClientBuilder")
    @DependsOn({"buildProperties","httpClient"})
    public WebClient.Builder webClientBuilder(BuildProperties buildProperties, HttpClient httpClient) {
        String raasUserAgent = new StringBuilder()
                .append(buildProperties.get("build.artifact")).append("/").append(buildProperties.get("build.version"))
                .append(" (Java/").append(buildProperties.get("build.java.version")).append(")")
                .toString();
        return WebClient
                .builder()
                .clientConnector(new ReactorClientHttpConnector(httpClient))
                .baseUrl(tangocardRaasUrl)
                .defaultHeader(HttpHeaders.AUTHORIZATION, getBasicAuthString(platformName, platformKey))
                .defaultHeader(HttpHeaders.ACCEPT, MediaType.APPLICATION_JSON_VALUE)
                .defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
                .defaultHeader(HttpHeaders.USER_AGENT, raasUserAgent.toString())
                .exchangeStrategies(ExchangeStrategies.builder()
                        .codecs(configurer -> configurer.defaultCodecs()
                                .maxInMemorySize(maxInMemorySizeBytes))
                        .build());
    }

    protected Properties loadFrom(Resource location, String prefix) throws IOException {
        String p = prefix.endsWith(".") ? prefix : prefix + ".";
        Properties source = PropertiesLoaderUtils.loadProperties(location);
        Properties target = new Properties();
        for (String key : source.stringPropertyNames()) {
            if (key.startsWith(p)) {
                target.put(key.substring(p.length()), source.get(key));
            }
        }
        return target;
    }
}
